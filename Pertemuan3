# Install OpenCV jika belum
!pip install opencv-python-headless

import cv2
import matplotlib.pyplot as plt
from google.colab import files
import numpy as np

# Fungsi konversi RGB ke HSI
def rgb_to_hsi(img_rgb):
    img_rgb = img_rgb.astype(np.float32) / 255
    R, G, B = img_rgb[..., 0], img_rgb[..., 1], img_rgb[..., 2]

    # Hitung Intensitas (I)
    I = (R + G + B) / 3.0

    # Hitung Saturasi (S)
    min_rgb = np.minimum(np.minimum(R, G), B)
    S = 1 - (3 / (R + G + B + 1e-6)) * min_rgb

    # Hitung Hue (H)
    numerator = 0.5 * ((R - G) + (R - B))
    denominator = np.sqrt((R - G)**2 + (R - B)*(G - B)) + 1e-6
    theta = np.arccos(np.clip(numerator / denominator, -1, 1))  # dalam radian

    H = np.where(B <= G, theta, (2 * np.pi - theta))
    H = H / (2 * np.pi)  # Normalisasi ke [0,1]

    # Gabungkan kembali ke citra HSI
    hsi = np.stack((H, S, I), axis=-1)
    hsi = np.clip(hsi * 255, 0, 255).astype(np.uint8)
    return hsi

# Upload gambar
uploaded = files.upload()

# Proses untuk setiap gambar yang diupload
for filename in uploaded.keys():
    # Baca gambar
    img = cv2.imread(filename)
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    # -------------------- 1. Citra Negatif --------------------
    negative_img = 255 - img_rgb

    # -------------------- 2. Transformasi Logaritmik --------------------
    img_float = img_rgb.astype(np.float32)
    c_log = 255 / np.log(1 + np.max(img_float))
    log_img = c_log * np.log(1 + img_float)
    log_img = np.uint8(np.clip(log_img, 0, 255))

    # -------------------- 3. Transformasi Power-Law --------------------
    gamma = 0.5
    c_gamma = 255 / (np.max(img_float) ** gamma)
    power_img = c_gamma * (img_float ** gamma)
    power_img = np.uint8(np.clip(power_img, 0, 255))

    # -------------------- 4. Histogram Equalization --------------------
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    hist_eq_img = cv2.equalizeHist(gray_img)

    # -------------------- 5. Histogram Normalization --------------------
    norm_img = img_rgb.astype(np.float32)
    min_val, max_val = np.min(norm_img), np.max(norm_img)
    norm_img = (norm_img - min_val) / (max_val - min_val) * 255
    norm_img = np.uint8(np.clip(norm_img, 0, 255))

    # -------------------- 6. Konversi RGB ke HSI --------------------
    hsi_img = rgb_to_hsi(img_rgb)

    # -------------------- Tampilkan Semua Gambar --------------------
    plt.figure(figsize=(24, 10))

    plt.subplot(3, 3, 1)
    plt.imshow(img_rgb)
    plt.title("1. Gambar Asli")
    plt.axis("off")

    plt.subplot(3, 3, 2)
    plt.imshow(negative_img)
    plt.title("2. Citra Negatif")
    plt.axis("off")

    plt.subplot(3, 3, 3)
    plt.imshow(log_img)
    plt.title("3. Transformasi Log")
    plt.axis("off")

    plt.subplot(3, 3, 4)
    plt.imshow(power_img)
    plt.title(f"4. Power-Law (Gamma={gamma})")
    plt.axis("off")

    plt.subplot(3, 3, 5)
    plt.imshow(hist_eq_img, cmap='gray')
    plt.title("5. Histogram Equalization")
    plt.axis("off")

    plt.subplot(3, 3, 6)
    plt.imshow(norm_img)
    plt.title("6. Histogram Normalization")
    plt.axis("off")

    plt.subplot(3, 3, 7)
    plt.imshow(hsi_img)
    plt.title("7. Konversi RGB ke HSI")
    plt.axis("off")

    plt.tight_layout()
    plt.show()

    # -------------------- Simpan & Unduh --------------------
    cv2.imwrite('citra_negatif.jpg', cv2.cvtColor(negative_img, cv2.COLOR_RGB2BGR))
    cv2.imwrite('citra_log.jpg', cv2.cvtColor(log_img, cv2.COLOR_RGB2BGR))
    cv2.imwrite('citra_power.jpg', cv2.cvtColor(power_img, cv2.COLOR_RGB2BGR))
    cv2.imwrite('citra_hist_eq.jpg', hist_eq_img)
    cv2.imwrite('citra_norm.jpg', cv2.cvtColor(norm_img, cv2.COLOR_RGB2BGR))
    cv2.imwrite('citra_hsi.jpg', cv2.cvtColor(hsi_img, cv2.COLOR_RGB2BGR))

    files.download('citra_negatif.jpg')
    files.download('citra_log.jpg')
    files.download('citra_power.jpg')
    files.download('citra_hist_eq.jpg')
    files.download('citra_norm.jpg')
    files.download('citra_hsi.jpg')
